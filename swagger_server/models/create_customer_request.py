# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CreateCustomerRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, phone: str=None, mail: str=None):  # noqa: E501
        """CreateCustomerRequest - a model defined in Swagger

        :param name: The name of this CreateCustomerRequest.  # noqa: E501
        :type name: str
        :param phone: The phone of this CreateCustomerRequest.  # noqa: E501
        :type phone: str
        :param mail: The mail of this CreateCustomerRequest.  # noqa: E501
        :type mail: str
        """
        self.swagger_types = {
            'name': str,
            'phone': str,
            'mail': str
        }

        self.attribute_map = {
            'name': 'name',
            'phone': 'phone',
            'mail': 'mail'
        }
        self._name = name
        self._phone = phone
        self._mail = mail

    @classmethod
    def from_dict(cls, dikt) -> 'CreateCustomerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateCustomerRequest of this CreateCustomerRequest.  # noqa: E501
        :rtype: CreateCustomerRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this CreateCustomerRequest.

        Complete Customer name  # noqa: E501

        :return: The name of this CreateCustomerRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CreateCustomerRequest.

        Complete Customer name  # noqa: E501

        :param name: The name of this CreateCustomerRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def phone(self) -> str:
        """Gets the phone of this CreateCustomerRequest.

        Telephone number  # noqa: E501

        :return: The phone of this CreateCustomerRequest.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this CreateCustomerRequest.

        Telephone number  # noqa: E501

        :param phone: The phone of this CreateCustomerRequest.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def mail(self) -> str:
        """Gets the mail of this CreateCustomerRequest.

        E-mail address  # noqa: E501

        :return: The mail of this CreateCustomerRequest.
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail: str):
        """Sets the mail of this CreateCustomerRequest.

        E-mail address  # noqa: E501

        :param mail: The mail of this CreateCustomerRequest.
        :type mail: str
        """
        if mail is None:
            raise ValueError("Invalid value for `mail`, must not be `None`")  # noqa: E501

        self._mail = mail
