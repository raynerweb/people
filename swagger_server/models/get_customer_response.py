# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re  # noqa: F401,E501
from swagger_server import util


class GetCustomerResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_id: str=None, name: str=None, phone: str=None, mail: str=None):  # noqa: E501
        """GetCustomerResponse - a model defined in Swagger

        :param customer_id: The customer_id of this GetCustomerResponse.  # noqa: E501
        :type customer_id: str
        :param name: The name of this GetCustomerResponse.  # noqa: E501
        :type name: str
        :param phone: The phone of this GetCustomerResponse.  # noqa: E501
        :type phone: str
        :param mail: The mail of this GetCustomerResponse.  # noqa: E501
        :type mail: str
        """
        self.swagger_types = {
            'customer_id': str,
            'name': str,
            'phone': str,
            'mail': str
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'name': 'name',
            'phone': 'phone',
            'mail': 'mail'
        }
        self._customer_id = customer_id
        self._name = name
        self._phone = phone
        self._mail = mail

    @classmethod
    def from_dict(cls, dikt) -> 'GetCustomerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetCustomerResponse of this GetCustomerResponse.  # noqa: E501
        :rtype: GetCustomerResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self) -> str:
        """Gets the customer_id of this GetCustomerResponse.


        :return: The customer_id of this GetCustomerResponse.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: str):
        """Sets the customer_id of this GetCustomerResponse.


        :param customer_id: The customer_id of this GetCustomerResponse.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def name(self) -> str:
        """Gets the name of this GetCustomerResponse.

        Complete Customer name  # noqa: E501

        :return: The name of this GetCustomerResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GetCustomerResponse.

        Complete Customer name  # noqa: E501

        :param name: The name of this GetCustomerResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def phone(self) -> str:
        """Gets the phone of this GetCustomerResponse.

        Telephone number  # noqa: E501

        :return: The phone of this GetCustomerResponse.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this GetCustomerResponse.

        Telephone number  # noqa: E501

        :param phone: The phone of this GetCustomerResponse.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def mail(self) -> str:
        """Gets the mail of this GetCustomerResponse.

        E-mail address  # noqa: E501

        :return: The mail of this GetCustomerResponse.
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail: str):
        """Sets the mail of this GetCustomerResponse.

        E-mail address  # noqa: E501

        :param mail: The mail of this GetCustomerResponse.
        :type mail: str
        """
        if mail is None:
            raise ValueError("Invalid value for `mail`, must not be `None`")  # noqa: E501

        self._mail = mail
